// Generated by CoffeeScript 2.7.0
var META_KEY, addOrUpdateTimestamp, getOrSetInputElement, inputElement, insertTimestamp, log, metaData, metaDataElement, resetMetaData, setMetaHTML, updateEndTimestamp, updateMetaData, waitForInputField;

META_KEY = "cgptihkv1";

log = function(s, ...args) {
  return console.log("[cGPTts Content]: " + s, ...args);
};

metaData = {};

inputElement = null;

metaDataElement = null;

getOrSetInputElement = function() {
  var currentInputElement;
  if (!(currentInputElement = document.querySelector("#prompt-textarea"))) {
    log("error locating inputElement");
    return;
  }
  if (inputElement !== currentInputElement) {
    log("inputElement updating");
    inputElement = currentInputElement;
    return resetMetaData();
  }
};

setMetaHTML = function() {
  return metaElement.innerHTML = JSON.stringify(metaData);
};

resetMetaData = function() {
  var metaElement;
  metaData = Object.assign({
    key: META_KEY,
    start: Date.now()
  });
  metaElement = document.createElement('p');
  inputElement.prepend(metaElement);
  return setMetaHTML();
};

updateMetaData = function(changes) {
  log("updateMetaData: " + JSON.stringify(changes));
  getOrSetInputElement();
  Object.assign(metaData, changes);
  return setMetaHTML();
};

addOrUpdateTimestamp = function(stampName) {
  return updateMetaData({
    [stampName]: Date.now()
  });
};

insertTimestamp = function(location) {
  var inputField, newParagraph, prefix, timestamp;
  log(`insertTimestamp (${location})`);
  if (!(inputField = document.querySelector("#prompt-textarea"))) {
    log("error locating inputField");
    return;
  }
  log("inputField HTML contents: " + inputField.getHTML());
  timestamp = new Date().toISOString();
  (newParagraph = document.createElement("p")).classList.add("timestamp", location);
  [newParagraph.textContent, prefix] = location === "start" ? [`[${timestamp} response received]`, "pre"] : [`[${timestamp} query sent]`, "ap"];
  return addIfAbsent(prefix, "timestamp", newParagraph, inputField);
};

waitForInputField = function(callback) {
  var attempt, check;
  attempt = 0;
  check = function() {
    var inputField;
    inputField = document.querySelector("#prompt-textarea");
    if (inputField != null) {
      log("Found input field!");
      return callback(inputField);
    } else if (attempt < 10) {
      attempt++;
      log(`Retrying to find input field... Attempt ${attempt}`);
      return setTimeout(check, 500);
    } else {
      return log("Gave up finding #prompt-textarea");
    }
  };
  return check();
};

waitForInputField(function(inputField) {
  if (!inputField.dataset.tsListenersAdded) {
    inputField.dataset.tsListenersAdded = "true";
    inputField.addEventListener("input", function(event) {
      return log(`Input detected! Current content: ${inputField.value}`);
    });
    return inputField.addEventListener("keydown", function(event) {
      if (event.key === "Enter") {
        if (event.shiftKey) {
          return log("Ignoring shift-enter");
        } else {
          log("Enter key detected");
          return updateTimestamp("querySent");
        }
      }
    });
  }
});

updateEndTimestamp = function() {
  var pid;
  log("updateEndTimestamp");
  if (pid = updateEndTimestamp.pid) {
    clearTimeout(pid);
  }
  addOrUpdateTimestamp("querySent");
  return updateEndTimestamp.pid = setTimeout(100, updateEndTimestamp);
};

browser.runtime.onMessage.addListener(function(message, sender, sendResponse) {
  log("Message received from background");
  if (message.action === "insertTimestamp") {
    getOrSetInputElement();
    if (!metaData.responseReceived) {
      addOrUpdateTimestamp("responseReceived");
    }
  }
  return updateEndTimestamp();
});

log("doc loaded (v1.2)");

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/mnt/robert-home/robert/git/github/rdeforest/ChatGPT-timestamp/src/content.coffee